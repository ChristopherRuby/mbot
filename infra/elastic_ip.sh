#!/bin/bash
# Script de gestion Elastic IP pour l'instance EC2 mbot

# Configuration - REMPLACEZ PAR VOS VALEURS  
INSTANCE_ID="i-1234567890abcdef0"  # Votre Instance ID

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonction pour allouer une nouvelle Elastic IP
allocate_elastic_ip() {
    echo -e "${BLUE}üåê Allocation d'une nouvelle Elastic IP${NC}"
    echo "===================================="
    
    echo "üí∞ Co√ªt: ~$3.60/mois si attach√©e √† une instance"
    echo "üí° Gratuit si l'instance est en cours d'ex√©cution"
    echo ""
    read -p "Confirmer l'allocation ? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Allocation annul√©e"
        return 1
    fi
    
    # Allouer l'Elastic IP
    echo "üîÑ Allocation en cours..."
    ALLOCATION_OUTPUT=$(aws ec2 allocate-address --domain vpc --output json 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        ALLOCATION_ID=$(echo $ALLOCATION_OUTPUT | jq -r '.AllocationId')
        PUBLIC_IP=$(echo $ALLOCATION_OUTPUT | jq -r '.PublicIp')
        
        echo -e "${GREEN}‚úÖ Elastic IP allou√©e avec succ√®s${NC}"
        echo "üÜî Allocation ID: $ALLOCATION_ID"
        echo "üåê IP Publique: $PUBLIC_IP"
        
        # Sauvegarder dans un fichier local
        echo "{\"allocation_id\": \"$ALLOCATION_ID\", \"public_ip\": \"$PUBLIC_IP\", \"created_at\": \"$(date -Iseconds)\"}" > elastic_ip.json
        echo "üíæ Informations sauvegard√©es dans elastic_ip.json"
        
        return 0
    else
        echo -e "${RED}‚ùå Erreur lors de l'allocation${NC}"
        return 1
    fi
}

# Fonction pour associer l'Elastic IP √† l'instance
associate_elastic_ip() {
    echo -e "${BLUE}üîó Association de l'Elastic IP √† l'instance${NC}"
    echo "============================================="
    
    if [ "$INSTANCE_ID" = "i-1234567890abcdef0" ]; then
        echo -e "${RED}‚ö†Ô∏è  Configurez d'abord INSTANCE_ID dans le script${NC}"
        return 1
    fi
    
    # V√©rifier si un fichier elastic_ip.json existe
    if [ -f "elastic_ip.json" ]; then
        ALLOCATION_ID=$(jq -r '.allocation_id' elastic_ip.json 2>/dev/null)
        PUBLIC_IP=$(jq -r '.public_ip' elastic_ip.json 2>/dev/null)
        
        if [ "$ALLOCATION_ID" != "null" ] && [ -n "$ALLOCATION_ID" ]; then
            echo "üìÅ Utilisation de l'Elastic IP du fichier: $PUBLIC_IP"
        else
            echo "‚ùå Fichier elastic_ip.json invalide"
            return 1
        fi
    else
        # Demander l'Allocation ID
        echo "Entrez l'Allocation ID de votre Elastic IP:"
        read -p "Allocation ID (eipalloc-xxx): " ALLOCATION_ID
        
        if [ -z "$ALLOCATION_ID" ]; then
            echo "‚ùå Allocation ID requis"
            return 1
        fi
    fi
    
    # V√©rifier que l'instance est en cours d'ex√©cution
    INSTANCE_STATE=$(aws ec2 describe-instances \
        --instance-ids $INSTANCE_ID \
        --query 'Reservations[0].Instances[0].State.Name' \
        --output text 2>/dev/null)
    
    if [ "$INSTANCE_STATE" != "running" ]; then
        echo -e "${RED}‚ùå L'instance doit √™tre en cours d'ex√©cution${NC}"
        echo "√âtat actuel: $INSTANCE_STATE"
        return 1
    fi
    
    # Associer l'IP
    echo "üîÑ Association en cours..."
    ASSOCIATION_ID=$(aws ec2 associate-address \
        --instance-id $INSTANCE_ID \
        --allocation-id $ALLOCATION_ID \
        --query 'AssociationId' \
        --output text 2>/dev/null)
    
    if [ $? -eq 0 ] && [ "$ASSOCIATION_ID" != "None" ]; then
        echo -e "${GREEN}‚úÖ Elastic IP associ√©e avec succ√®s${NC}"
        echo "üÜî Association ID: $ASSOCIATION_ID"
        echo "üåê Votre application est maintenant accessible sur: http://$PUBLIC_IP"
        
        # Mettre √† jour le fichier local
        if [ -f "elastic_ip.json" ]; then
            TEMP_FILE=$(mktemp)
            jq ". + {\"association_id\": \"$ASSOCIATION_ID\", \"instance_id\": \"$INSTANCE_ID\", \"associated_at\": \"$(date -Iseconds)\"}" elastic_ip.json > $TEMP_FILE && mv $TEMP_FILE elastic_ip.json
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Erreur lors de l'association${NC}"
        return 1
    fi
}

# Fonction pour dissocier l'Elastic IP
disassociate_elastic_ip() {
    echo -e "${BLUE}üîå Dissociation de l'Elastic IP${NC}"
    echo "==============================="
    
    if [ -f "elastic_ip.json" ]; then
        ASSOCIATION_ID=$(jq -r '.association_id // empty' elastic_ip.json 2>/dev/null)
    fi
    
    if [ -z "$ASSOCIATION_ID" ] || [ "$ASSOCIATION_ID" = "null" ]; then
        echo "Entrez l'Association ID:"
        read -p "Association ID (eipassoc-xxx): " ASSOCIATION_ID
        
        if [ -z "$ASSOCIATION_ID" ]; then
            echo "‚ùå Association ID requis"
            return 1
        fi
    fi
    
    echo "üîÑ Dissociation en cours..."
    aws ec2 disassociate-address --association-id $ASSOCIATION_ID
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Elastic IP dissoci√©e avec succ√®s${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  L'instance aura une nouvelle IP au prochain d√©marrage${NC}"
        
        # Mettre √† jour le fichier local
        if [ -f "elastic_ip.json" ]; then
            TEMP_FILE=$(mktemp)
            jq ". + {\"association_id\": null, \"disassociated_at\": \"$(date -Iseconds)\"}" elastic_ip.json > $TEMP_FILE && mv $TEMP_FILE elastic_ip.json
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Erreur lors de la dissociation${NC}"
        return 1
    fi
}

# Fonction pour lib√©rer l'Elastic IP
release_elastic_ip() {
    echo -e "${BLUE}üóëÔ∏è  Lib√©ration de l'Elastic IP${NC}"
    echo "=============================="
    
    if [ -f "elastic_ip.json" ]; then
        ALLOCATION_ID=$(jq -r '.allocation_id' elastic_ip.json 2>/dev/null)
        PUBLIC_IP=$(jq -r '.public_ip' elastic_ip.json 2>/dev/null)
        
        if [ "$ALLOCATION_ID" != "null" ] && [ -n "$ALLOCATION_ID" ]; then
            echo "üìÅ IP √† lib√©rer: $PUBLIC_IP ($ALLOCATION_ID)"
        else
            echo "‚ùå Fichier elastic_ip.json invalide"
            return 1
        fi
    else
        echo "Entrez l'Allocation ID de l'Elastic IP √† lib√©rer:"
        read -p "Allocation ID (eipalloc-xxx): " ALLOCATION_ID
        
        if [ -z "$ALLOCATION_ID" ]; then
            echo "‚ùå Allocation ID requis"
            return 1
        fi
    fi
    
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cette action est irr√©versible${NC}"
    echo "üí∞ Vous ne serez plus factur√© pour cette IP"
    echo "üîÑ L'IP sera attribu√©e √† un autre utilisateur AWS"
    echo ""
    read -p "Confirmer la lib√©ration ? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Lib√©ration annul√©e"
        return 1
    fi
    
    # Lib√©rer l'IP
    echo "üîÑ Lib√©ration en cours..."
    aws ec2 release-address --allocation-id $ALLOCATION_ID
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Elastic IP lib√©r√©e avec succ√®s${NC}"
        
        # Supprimer le fichier local
        if [ -f "elastic_ip.json" ]; then
            rm elastic_ip.json
            echo "üóëÔ∏è  Fichier local supprim√©"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå Erreur lors de la lib√©ration${NC}"
        return 1
    fi
}

# Fonction pour lister les Elastic IP
list_elastic_ips() {
    echo -e "${BLUE}üìã Liste de vos Elastic IP${NC}"
    echo "=========================="
    
    EIP_LIST=$(aws ec2 describe-addresses --output table 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        echo "$EIP_LIST"
    else
        echo "‚ùå Erreur lors de la r√©cup√©ration des Elastic IP"
    fi
    
    # Afficher les informations du fichier local si disponible
    if [ -f "elastic_ip.json" ]; then
        echo ""
        echo -e "${BLUE}üìÅ Informations locales:${NC}"
        cat elastic_ip.json | jq . 2>/dev/null || echo "Fichier local invalide"
    fi
}

# Menu principal
show_menu() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}üåê Elastic IP - Chatbot MongoDB Movies${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    echo "1) üåê Allouer une nouvelle Elastic IP"
    echo "2) üîó Associer √† l'instance"
    echo "3) üîå Dissocier de l'instance"
    echo "4) üóëÔ∏è  Lib√©rer une Elastic IP"
    echo "5) üìã Lister toutes les Elastic IP"
    echo "6) üí∞ Information sur les co√ªts"
    echo "0) ‚ùå Quitter"
    echo ""
}

# Information sur les co√ªts
cost_info() {
    echo -e "${BLUE}üí∞ Informations sur les co√ªts Elastic IP${NC}"
    echo "========================================="
    echo ""
    echo "üìä Tarification AWS Elastic IP :"
    echo ""
    echo "‚úÖ GRATUIT si :"
    echo "   - Attach√©e √† une instance EN COURS D'EX√âCUTION"
    echo "   - Une seule IP par instance"
    echo ""
    echo "üí∞ PAYANT (~$3.60/mois) si :"
    echo "   - Attach√©e √† une instance ARR√äT√âE"
    echo "   - Non attach√©e (IP r√©serv√©e)"
    echo "   - IP suppl√©mentaires sur la m√™me instance"
    echo ""
    echo "üí° Bonnes pratiques :"
    echo "   - Lib√©rez les IP non utilis√©es"
    echo "   - Une IP par instance maximum"
    echo "   - Associez/dissociez selon l'√©tat de l'instance"
    echo ""
    echo "üîÑ Workflow √©conomique :"
    echo "   - Instance ON: Associer l'IP"
    echo "   - Instance OFF: Dissocier l'IP (ou garder si usage r√©gulier)"
}

# Configuration initiale
if [ "$INSTANCE_ID" = "i-1234567890abcdef0" ]; then
    echo -e "${RED}‚ö†Ô∏è  CONFIGURATION REQUISE${NC}"
    echo "Veuillez modifier ce script et remplacer:"
    echo "INSTANCE_ID par votre vrai Instance ID"
    exit 1
fi

# V√©rifier AWS CLI
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI non trouv√©${NC}"
    echo "Ex√©cutez d'abord ./setup_aws.sh"
    exit 1
fi

# V√©rifier jq
if ! command -v jq &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  'jq' non trouv√© (fonctionnalit√©s limit√©es)${NC}"
    echo "Installation recommand√©e: sudo apt install jq"
fi

# Mode interactif
while true; do
    show_menu
    read -p "Choisissez une option: " choice
    echo ""
    
    case $choice in
        1) allocate_elastic_ip ;;
        2) associate_elastic_ip ;;
        3) disassociate_elastic_ip ;;
        4) release_elastic_ip ;;
        5) list_elastic_ips ;;
        6) cost_info ;;
        0) echo -e "${GREEN}üëã Gestion Elastic IP termin√©e !${NC}"; exit 0 ;;
        *) echo -e "${RED}‚ùå Option invalide${NC}" ;;
    esac
    
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    echo ""
done