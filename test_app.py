#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement du chatbot MongoDB Movies
"""

import os
import sys
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def test_environment():
    """Test la configuration de l'environnement"""
    print("üîç Test de la configuration...")
    
    required_vars = ["PERPLEXITY_API_KEY", "MONGODB_URI"]
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ Configuration d'environnement OK")
        return True

def test_imports():
    """Test les imports des modules"""
    print("\nüì¶ Test des imports...")
    
    try:
        import streamlit
        print("‚úÖ Streamlit import√©")
        
        import requests  
        print("‚úÖ Requests import√©")
        
        import pymongo
        print("‚úÖ PyMongo import√©")
        
        from mongodb_service import MongoDBService
        print("‚úÖ MongoDBService import√©")
        
        from perplexity_service import PerplexityService
        print("‚úÖ PerplexityService import√©")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_mongodb_connection():
    """Test la connexion MongoDB"""
    print("\nüóÑÔ∏è Test de la connexion MongoDB...")
    
    try:
        from mongodb_service import MongoDBService
        
        mongo_service = MongoDBService()
        
        if mongo_service.client:
            print("‚úÖ Connexion MongoDB √©tablie")
            
            # Test des statistiques
            stats = mongo_service.get_collection_stats()
            if stats:
                print(f"üìä {stats.get('total_documents', 0)} documents dans la collection")
                
            # Test document d'exemple
            sample = mongo_service.get_sample_document()
            if sample:
                print("‚úÖ Document d'exemple r√©cup√©r√©")
            
            mongo_service.close_connection()
            return True
        else:
            print("‚ùå √âchec de la connexion MongoDB")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur MongoDB: {e}")
        return False

def test_perplexity_api():
    """Test l'API Perplexity (sans faire de requ√™te r√©elle)"""
    print("\nü§ñ Test de la configuration Perplexity...")
    
    try:
        from perplexity_service import PerplexityService
        
        perplexity_service = PerplexityService()
        
        if perplexity_service.api_key:
            print("‚úÖ Cl√© API Perplexity configur√©e")
            print(f"üîß Mod√®le utilis√©: {perplexity_service.model}")
            return True
        else:
            print("‚ùå Cl√© API Perplexity manquante")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur configuration Perplexity: {e}")
        return False

def test_schema_loading():
    """Test le chargement du sch√©ma depuis CLAUDE.md"""
    print("\nüìã Test du chargement du sch√©ma...")
    
    try:
        with open("CLAUDE.md", "r", encoding="utf-8") as f:
            content = f.read()
            
        if "### Sch√©ma des Documents" in content:
            print("‚úÖ Sch√©ma MongoDB trouv√© dans CLAUDE.md")
            return True
        else:
            print("‚ö†Ô∏è Section sch√©ma non trouv√©e dans CLAUDE.md")
            return False
            
    except FileNotFoundError:
        print("‚ùå Fichier CLAUDE.md non trouv√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lecture CLAUDE.md: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üé¨ Test du Chatbot Analytique MongoDB Movies")
    print("=" * 50)
    
    tests = [
        test_environment,
        test_imports,
        test_schema_loading,
        test_perplexity_api,
        test_mongodb_connection
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! L'application est pr√™te.")
        print("\nüöÄ Pour lancer l'application:")
        print("   streamlit run app.py")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
        
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)