import streamlit as st
import json
from mongodb_service import MongoDBService
from perplexity_service import PerplexityService
from config import APP_TITLE, APP_DESCRIPTION, APP_KEYWORDS, APP_AUTHOR


def load_schema_context():
    """Charge le contexte du sch√©ma MongoDB depuis CLAUDE.md"""
    try:
        with open("CLAUDE.md", "r", encoding="utf-8") as f:
            content = f.read()
            # Extraire la section du sch√©ma
            start = content.find("### Sch√©ma des Documents")
            end = content.find("## Capacit√©s d'Analyse Support√©es")
            if start != -1 and end != -1:
                return content[start:end].strip()
            return "Sch√©ma non disponible"
    except FileNotFoundError:
        return "Fichier CLAUDE.md non trouv√©"


def init_services():
    """Initialise les services MongoDB et Perplexity"""
    if 'mongodb_service' not in st.session_state:
        st.session_state.mongodb_service = MongoDBService()
    
    if 'perplexity_service' not in st.session_state:
        st.session_state.perplexity_service = PerplexityService()
    
    if 'schema_context' not in st.session_state:
        st.session_state.schema_context = load_schema_context()


def display_connection_status():
    """Affiche le statut de connexion des services"""
    col1, col2 = st.columns(2)
    
    with col1:
        if st.session_state.mongodb_service.client:
            st.success("‚úÖ MongoDB connect√©")
            stats = st.session_state.mongodb_service.get_collection_stats()
            if stats and 'total_documents' in stats:
                st.info(f"üìä {stats.get('total_documents', 0)} films dans la base")
        else:
            st.error("‚ùå Erreur de connexion MongoDB")
    
    with col2:
        if st.session_state.perplexity_service.api_key:
            st.success("‚úÖ API Perplexity configur√©e")
        else:
            st.error("‚ùå Cl√© API Perplexity manquante")


def handle_user_question(user_question: str):
    """Traite la question de l'utilisateur"""
    
    # √âtape 1: G√©n√©rer la requ√™te MongoDB via Perplexity
    with st.spinner("üß† Analyse de votre question..."):
        query_info = st.session_state.perplexity_service.generate_mongodb_query(
            user_question, 
            st.session_state.schema_context
        )
    
    # Afficher les d√©tails de la requ√™te g√©n√©r√©e
    with st.expander("üîç D√©tails de l'analyse"):
        st.write("**Type de requ√™te:**", query_info.get("query_type", "inconnu"))
        st.write("**Explication:**", query_info.get("explanation", "Non disponible"))
        st.code(json.dumps(query_info.get("mongodb_query", {}), indent=2), language="json")
    
    # √âtape 2: Ex√©cuter la requ√™te MongoDB
    if query_info.get("query_type") == "error":
        st.error(f"Erreur lors de l'analyse: {query_info.get('explanation')}")
        return
    
    with st.spinner("üìä Ex√©cution de la requ√™te MongoDB..."):
        try:
            mongodb_query = query_info.get("mongodb_query", {})
            query_type = query_info.get("query_type", "find")
            
            results = st.session_state.mongodb_service.execute_query(query_type, mongodb_query)
        
        except Exception as e:
            st.error(f"Erreur lors de l'ex√©cution de la requ√™te: {str(e)}")
            return
    
    # √âtape 3: Formater la r√©ponse via Perplexity
    with st.spinner("‚ú® Formatage de la r√©ponse..."):
        formatted_response = st.session_state.perplexity_service.format_results(
            results, 
            user_question
        )
    
    # Afficher la r√©ponse
    st.markdown("### üé¨ R√©ponse")
    st.markdown(formatted_response)
    
    # Afficher les donn√©es brutes si demand√©
    if st.checkbox("Voir les donn√©es brutes"):
        # D√©tecter si l'utilisateur veut toutes les donn√©es
        needs_all_data = any(keyword in user_question.lower() for keyword in [
            "pour toutes les ann√©es", "toutes les", "chaque ann√©e", "par ann√©e", 
            "pour chaque", "d√©taill√©", "complet", "tous les r√©sultats"
        ])
        
        if needs_all_data or len(results) <= 10:
            st.json(results)
        else:
            st.json(results[:5])
            st.info(f"Affichage des 5 premiers r√©sultats sur {len(results)} au total")


def main():
    """Application principale Streamlit"""
    
    st.set_page_config(
        page_title=APP_TITLE,
        page_icon="üé¨",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'About': "Outil professionnel d'analyse de donn√©es cin√©matographiques - Data Factory"
        }
    )
    
    # M√©tadonn√©es SEO et s√©curit√©
    st.markdown(f"""
    <meta name="description" content="{APP_DESCRIPTION.replace(chr(10), ' ').strip()}">
    <meta name="keywords" content="{APP_KEYWORDS}">
    <meta name="author" content="{APP_AUTHOR}">
    <meta name="robots" content="index, follow">
    <meta name="application-name" content="MongoDB Movies Analytics">
    <meta name="theme-color" content="#1f77b4">
    <meta property="og:title" content="{APP_TITLE}">
    <meta property="og:description" content="Plateforme professionnelle d'analyse de donn√©es cin√©matographiques avec IA">
    <meta property="og:type" content="website">
    <meta property="og:locale" content="fr_FR">
    """, unsafe_allow_html=True)
    
    # Headers de s√©curit√© et information m√©tier
    st.markdown("""
    <script>
        // Configuration s√©curis√©e pour application business
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Application Business Intelligence - Data Factory');
        });
    </script>
    """, unsafe_allow_html=True)
    
    # Signature en haut
    st.markdown("<div style='text-align: left; font-style: italic; color: #666; margin-bottom: 10px;'>By Christopher M.</div>", unsafe_allow_html=True)
    
    # Style pour bouton bleu
    st.markdown("""
    <style>
    .stButton > button[kind="primary"] {
        background-color: #1f77b4 !important;
        color: white !important;
        border: none !important;
        border-radius: 6px;
        font-weight: 500;
    }
    .stButton > button[kind="primary"]:hover {
        background-color: #1565c0 !important;
        box-shadow: 0 2px 8px rgba(31, 119, 180, 0.3);
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.title(APP_TITLE)
    st.markdown(APP_DESCRIPTION)
    
    # Description professionnelle enrichie
    st.info("""
    üè¢ **Application Professionnelle Business Intelligence**
    
    Plateforme d'analyse de donn√©es d√©di√©e aux professionnels du cin√©ma, analystes de donn√©es et 
    chercheurs acad√©miques. Utilise MongoDB et l'intelligence artificielle pour transformer 
    des questions en langage naturel en analyses statistiques avanc√©es.
    
    üìä **Cas d'usage professionnel** : √âtudes de march√©, analyses de tendances, recherche acad√©mique, 
    reporting business intelligence, veille concurrentielle dans l'industrie cin√©matographique.
    """)
    
    # Initialiser les services
    init_services()
    
    # Afficher le statut de connexion
    display_connection_status()
    
    st.markdown("---")
    
    # Interface de chat
    st.markdown("### üí¨ Posez votre question sur les films")
    
    # Exemples de questions
    st.markdown("**Exemples de questions:**")
    example_questions = [
        "Quelle est la note moyenne des films parus en 2015 ?",
        "Quels sont les 5 r√©alisateurs qui ont produit le plus de films entre 2000 et 2015 ?",
        "Combien de films sont sortis entre 2012 et 2014 ?",
        "Quel est le premier film paru en 2016 et qui l'a r√©alis√© ?",
        "Peux-tu me montrer le contenu d'un document de la collection ?",
        "Quel est le genre le plus populaire par d√©cennie entre 1970 et 2010 ?"
    ]
    
    for i, example in enumerate(example_questions):
        if st.button(f"üìù {example}", key=f"example_{i}"):
            st.session_state.user_input = example
    
    # Zone de saisie
    user_question = st.text_input(
        "Votre question:",
        key="user_input",
        placeholder="Ex: Quels sont les meilleurs films de science-fiction des ann√©es 2000 ?"
    )
    
    # Bouton d'envoi
    if st.button("üöÄ Analyser", type="primary") and user_question:
        handle_user_question(user_question)
    
    # Sidebar avec informations
    with st.sidebar:
        st.markdown("### üìã Informations")
        
        if st.button("üîÑ Actualiser les stats"):
            stats = st.session_state.mongodb_service.get_collection_stats()
            if stats:
                st.metric("Films totaux", stats.get('total_documents', 0))
                st.metric("Taille (MB)", stats.get('size_mb', 0))
                st.metric("Index", stats.get('indexes', 0))
        
        st.markdown("### üõ† Fonctionnalit√©s Business")
        st.markdown("""
        - üìä **Analyses statistiques** professionnelles
        - üèÜ **Classements** et √©tudes de march√©
        - üîç **Comparaisons** multi-crit√®res avanc√©es
        - üìà **Analyses crois√©es** et corr√©lations
        - üé≠ **Segmentation** par genres et p√©riodes
        - üíº **Reporting** business intelligence
        """)
        
        st.markdown("### üéØ Public Cible")
        st.markdown("""
        - **Professionnels** du cin√©ma
        - **Analystes** de donn√©es
        - **Chercheurs** acad√©miques
        - **Consultants** media & divertissement
        """)
        
        if st.button("üìñ Voir un exemple de document"):
            sample_doc = st.session_state.mongodb_service.get_sample_document()
            if sample_doc:
                st.json(sample_doc)


if __name__ == "__main__":
    main()